<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Y on tolehi.co</title>
    <link>http://localhost:1313/categories/y/</link>
    <description>Recent content in Y on tolehi.co</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 08 Dec 2015 18:00:59 +0900</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/y/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>myojotest</title>
      <link>http://localhost:1313/post/myojotest/</link>
      <pubDate>Tue, 08 Dec 2015 18:00:59 +0900</pubDate>
      
      <guid>http://localhost:1313/post/myojotest/</guid>
      <description></description>
    </item>
    
    <item>
      <title>my new postaa</title>
      <link>http://localhost:1313/post/my-new-postaa/</link>
      <pubDate>Mon, 25 May 2015 06:10:29 +0900</pubDate>
      
      <guid>http://localhost:1313/post/my-new-postaa/</guid>
      <description>

&lt;p&gt;Hugo is a static site engine written in go.&lt;/p&gt;

&lt;p&gt;It makes use of a variety of open source projects including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://github.com/spf13/cobra&#34;&gt;Cobra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://github.com/spf13/viper&#34;&gt;Viper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://github.com/spf13/jWalterWeatherman&#34;&gt;J Walter Weatherman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://github.com/spf13/cast&#34;&gt;Cast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Learn more and contribute on &lt;a href=&#34;https://github.com/spf13&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;setup:9d1383db63fb6ca6b1ae1a08f1d1ab48&#34;&gt;Setup&lt;/h2&gt;

&lt;p&gt;&lt;div class=&#34;photoset-grid&#34;&gt;
&lt;img src=&#34;http://localhost:1313/images/post/photo2.jpg&#34; alt=&#34;photo2.jpg&#34; /&gt;
&lt;/p&gt;

&lt;h2 id=&#34;div:9d1383db63fb6ca6b1ae1a08f1d1ab48&#34;&gt;&lt;/div&gt;&lt;/h2&gt;

&lt;p&gt;Some fun facts about &lt;a href=&#34;http://hugo.spf13.com&#34;&gt;Hugo&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Built in &lt;a href=&#34;http://golang.org&#34;&gt;Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Loosely inspired by &lt;a href=&#34;http://jekyllrb.com&#34;&gt;Jekyll&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Primarily developed by &lt;a href=&#34;http://spf13.com&#34;&gt;spf13&lt;/a&gt; on the train while commuting to and from Manhattan.&lt;/li&gt;
&lt;li&gt;Coded in &lt;a href=&#34;http://vim.org&#34;&gt;Vim&lt;/a&gt; using &lt;a href=&#34;http://vim.spf13.com&#34;&gt;spf13-vim&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>my new posta</title>
      <link>http://localhost:1313/post/my-new-posta/</link>
      <pubDate>Mon, 25 May 2015 06:09:25 +0900</pubDate>
      
      <guid>http://localhost:1313/post/my-new-posta/</guid>
      <description>

&lt;p&gt;Hugo is a static site engine written in go.&lt;/p&gt;

&lt;p&gt;It makes use of a variety of open source projects including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://github.com/spf13/cobra&#34;&gt;Cobra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://github.com/spf13/viper&#34;&gt;Viper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://github.com/spf13/jWalterWeatherman&#34;&gt;J Walter Weatherman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://github.com/spf13/cast&#34;&gt;Cast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Learn more and contribute on &lt;a href=&#34;https://github.com/spf13&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;setup:fbfc481faa8a2ac5657e2df4a9a3a269&#34;&gt;Setup&lt;/h2&gt;

&lt;p&gt;&lt;div class=&#34;photoset-grid&#34;&gt;
&lt;img src=&#34;http://localhost:1313/images/post/photo2.jpg&#34; alt=&#34;photo2.jpg&#34; /&gt;
&lt;/p&gt;

&lt;h2 id=&#34;div:fbfc481faa8a2ac5657e2df4a9a3a269&#34;&gt;&lt;/div&gt;&lt;/h2&gt;

&lt;p&gt;Some fun facts about &lt;a href=&#34;http://hugo.spf13.com&#34;&gt;Hugo&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Built in &lt;a href=&#34;http://golang.org&#34;&gt;Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Loosely inspired by &lt;a href=&#34;http://jekyllrb.com&#34;&gt;Jekyll&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Primarily developed by &lt;a href=&#34;http://spf13.com&#34;&gt;spf13&lt;/a&gt; on the train while commuting to and from Manhattan.&lt;/li&gt;
&lt;li&gt;Coded in &lt;a href=&#34;http://vim.org&#34;&gt;Vim&lt;/a&gt; using &lt;a href=&#34;http://vim.spf13.com&#34;&gt;spf13-vim&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>my new post</title>
      <link>http://localhost:1313/slushasia_eyecatch.jpg</link>
      <pubDate>Mon, 25 May 2015 05:48:58 +0900</pubDate>
      
      <guid>http://localhost:1313/slushasia_eyecatch.jpg</guid>
      <description>

&lt;h1 id=&#34;hugoでブログをやってみる:998e98563bf47ddb62011ba7e51f2b7e&#34;&gt;hugoでブログをやってみる&lt;/h1&gt;

&lt;p&gt;ブログをやってみようと思った時に、ここはRuby書いてる人っぽくjekyllでやってみるか！って思って調べてたら、もっと良さそうなものを見つけた。gitでリポジトリをプッシュするだけで簡単にブログ記事をあげられる＆記事の生成がめっちゃ早いということで評判が良かったので、&lt;a href=&#34;http://gohugo.io/&#34;&gt;hugo&lt;/a&gt;を使ってみることにしました。そして、ドハマりしたのでメモ。&lt;/p&gt;

&lt;h2 id=&#34;hugoの魅力:998e98563bf47ddb62011ba7e51f2b7e&#34;&gt;hugoの魅力&lt;/h2&gt;

&lt;h3 id=&#34;1-とにかく記事作成が楽:998e98563bf47ddb62011ba7e51f2b7e&#34;&gt;1. とにかく記事作成が楽&lt;/h3&gt;

&lt;p&gt;最終的にですが、ターミナルから以下の手順だけでGithub pagesにてブログが更新できます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-terminal&#34;&gt;$cd ~/blog
#hugoによって生成されたディレクトリまで移動
$hugo new post/hugahoge.md
#新規マークダウンファイルの作成
$ ./deploy.sh
#色々なコマンドの入ったシェルスクリプトの実行(コピペで手に入る)
$ git push origin master
#hugoによって生成されたディレクトリのリポジトリをgithub pagesのリモートにプッシュ(これはホントはやらなくて良い手順のハズ・・・・)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-ndash-watchコマンドでオートリロード-h3:998e98563bf47ddb62011ba7e51f2b7e&#34;&gt;2. &amp;ndash;watchコマンドでオートリロード!!&lt;/h3&gt;&lt;/h3&gt;

&lt;p&gt;hugoでは、以下のコマンドで&lt;code&gt;localhost:1313&lt;/code&gt;からプレビューができます。この時、&lt;code&gt;--watch&lt;/code&gt;コマンドを利用することでmdファイルを更新する度にブラウザ側のプレビューも自動で更新されます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-terminal&#34;&gt;#hugoのルート・ディレクトリから・・・
$hugo server --watch -t hugo-zen
#--watchコマンド！
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これがかなり便利です。いちいちcommand + r する手間が省けるのが素晴らしい。デュアルディスプレイとか&lt;a href=&#34;https://itunes.apple.com/jp/app/window-magnet/id441258766?mt=12&#34;&gt;window magnet&lt;/a&gt;とかで捗ります。&lt;/p&gt;

&lt;h3 id=&#34;3-markdown記法で気軽に書いて更新できる:998e98563bf47ddb62011ba7e51f2b7e&#34;&gt;3.Markdown記法で気軽に書いて更新できる&lt;/h3&gt;

&lt;p&gt;これはjekyllなどでもそうですが、mdで書けるのは非常に楽です。普段からmdを書いているのもありますが、もう正直色をつけたり文字の大きさをいちいち変えたり「できる」というだけでまどろっこしいので。&lt;/p&gt;

&lt;h3 id=&#34;4-記事の生成が早い:998e98563bf47ddb62011ba7e51f2b7e&#34;&gt;4.記事の生成が早い&lt;/h3&gt;

&lt;p&gt;これは多くの人が言及しているので割愛。jekyllにはすごくお世話になっているのですが正直生成でストレスを感じたことはありません。上記のオートリロードが無いくらいですかね。&lt;/p&gt;

&lt;h2 id=&#34;インストール-テーマの適用:998e98563bf47ddb62011ba7e51f2b7e&#34;&gt;インストール ~ テーマの適用&lt;/h2&gt;

&lt;h3 id=&#34;インストール:998e98563bf47ddb62011ba7e51f2b7e&#34;&gt;インストール&lt;/h3&gt;

&lt;p&gt;とっても簡単。homebrewユーザーなら、以下のコマンドで。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-terminal&#34;&gt;$cd 
#ホームディレクトリに移動
$brew install hugo
#hugaじゃないよ
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;続いて、以下のコマンドで新たなhugoプロジェクトを作成。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-terminal&#34;&gt;$hugo new site &amp;amp;lt;your_site_name&amp;amp;gt;
#&amp;amp;lt;&amp;amp;gt;の部分は任意の名前を入れてね！
$cd &amp;amp;lt;your_site_name&amp;amp;gt;
#プロジェクトのルート・ディレクトリに移動しておきましょう
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;テーマの適用:998e98563bf47ddb62011ba7e51f2b7e&#34;&gt;テーマの適用&lt;/h3&gt;

&lt;p&gt;このままビルドしても記事を作成することはできるのですが、最初からある程度デザインができている方が楽です。というわけで、テーマを適用しましょう。まずは以下のコマンドでテーマを利用できるようにします。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-terminal&#34;&gt;$git clone --recursive https://github.com/spf13/hugoThemes.git themes
#全てのテーマをダウンロード
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今は全てのテーマをダウンロードしましたが、あとで利用するもの以外は削除してしまって構いません。&lt;/p&gt;

&lt;p&gt;ところで、hugoはrailsなどと同じようにローカルでサーバーを立ち上げてプレビューすることができます。テーマは、その際にオプションで選択できます。&lt;/p&gt;

&lt;h3 id=&#34;記事の作成:998e98563bf47ddb62011ba7e51f2b7e&#34;&gt;記事の作成&lt;/h3&gt;

&lt;p&gt;次に、試しに記事を作ってみます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-terminal&#34;&gt;hugo new post/hoge.md
#content/post/hoge.md が作成されます
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;生成されたmdファイルを適当に編集して、プレビューしてみましょう。以下のコマンドを打ちます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-terminal&#34;&gt;$hugo server -t 使用したいテーマ名 --watch
#テーマを適用しつつ、プレビューを起動。例えば以下のように・・・
$hugo server -t simple-a --watch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用したいテーマ名の部分には、themesというディレクトリに入っているテーマの名前を入れます。うまく動かないものもありますが、とりあえず良さそうなものがないか試してみましょう。&lt;/p&gt;

&lt;p&gt;以下のように表示されれば成功です。(と思ったら画像がうまく表示できない・・・)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;images/001.jpg&#34; alt=&#34;purehugo&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;github-pagesで公開:998e98563bf47ddb62011ba7e51f2b7e&#34;&gt;github pagesで公開&lt;/h2&gt;

&lt;p&gt;ここが一番詰まりました。「サーバー立ち上げたらテーマが適用されるのね。ほう、publicディレクトリができてそこに静的ファイルが生成されるとな？」とまでは良かったのですが、そもそもgithub pagesを使ったことがなかったのでその仕組みを知るのに一苦労。そして、いい感じのurlで表示できるようになるまでにまた一苦労。&lt;/p&gt;

&lt;p&gt;基本的には、以下のhugoの公式docを読めばなんとかなるっぽいですが。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://gohugo.io/tutorials/github-pages-blog/&#34;&gt;Github Pagesへのセットアップ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;よくわからなかったので、いろんな記事を参考に自分なりにやりました。これから紹介する方法は不完全ですので、完全版を教えていただけますと大変助かります(汗&lt;/p&gt;

&lt;h3 id=&#34;リポジトリを2つ作成:998e98563bf47ddb62011ba7e51f2b7e&#34;&gt;リポジトリを2つ作成&lt;/h3&gt;

&lt;p&gt;まずはgithub上で、リモートリポジトリを2つ作ります。1つは名前はなんでも大丈夫です。もう一つは公開用なのでgithub pagesの規約どおりに作ります。ここでは前者から&lt;/p&gt;

&lt;p&gt;hogehuga&lt;/p&gt;

&lt;p&gt;username.github.io&lt;/p&gt;

&lt;p&gt;とします。&lt;/p&gt;

&lt;p&gt;2つのリモートリポジトリが作れたら、次はhugoプロジェクトのルートディレクトリでローカルリポジトリを作り、先ほど作ったhogehugaの方にaddします。すでにプレビューをしているなら、ルートディレクトリ下に&lt;code&gt;public&lt;/code&gt;フォルダができていますが、こちらは&lt;em&gt;消しておく必要があります。&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-terminal&#34;&gt;$cd ~/blog
#プロジェクトのルート・ディレクトリに移動
$rm -rf public
#publicフォルダを削除
$git init
#gitコマンドでローカルリポジトリを作成
$git remote add origin https://github.com/&amp;amp;lt;gitのuser名&amp;amp;gt;/hogehuga.git
$git add .
#カレントディレクトリ以下を全てadd
$git commit -m &amp;amp;quot;first commit&amp;amp;quot;
#コミット
$git push origin master
#プッシュ
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;続いてGithub Pagesの表示で利用するリポジトリのpublicフォルダをhogehugaのサブモジュールとして追加します。なので、もう一度publicフォルダを作り直します。そのために、ビルドのコマンドを打ちます。ここでは、&lt;code&gt;hugo -t テンプレート名&lt;/code&gt;とすると再びpublicフォルダを作成できます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-terminal&#34;&gt;$hugo -t &amp;amp;lt;テンプレート名&amp;amp;gt;
#publicフォルダに静的ファイルを生成
$git submodule add git@github.com:&amp;amp;lt;githubのユーザー名&amp;amp;gt;/&amp;amp;lt;githubのユーザー名&amp;amp;gt;.github.io.git public
#サブモジュールとしてpublicフォルダを追加


gitのサブモジュールっていうのはあくまで本体の一部のディレクトリを別のリポジトリで管理するものだと思ってましたが、hugoのページを読んでいるとどうも本家の方を更新することで本家のサブモジュールであるpublicも更新されて結果が反映される、みたいなノリなんですよね。よくわからない。。

ここまで来たら、プロジェクトのルート・ディレクトリに以下の内容のシェルスクリプト``deploy.sh``を作成します。途中記事をビルドする``hugo``の後に、 ``-t``オプションでテーマを指定することを忘れないでください。

```terminal
#deploy.shの中身
#!/bin/bash

echo -e &amp;amp;quot;\033[0;32mDeploying updates to GitHub...\033[0m&amp;amp;quot;

# Build the project. 
hugo # if using a theme, replace by `hugo -t &amp;amp;lt;yourtheme&amp;amp;gt;`

#↑ここを変更しましょう！！

# Go To Public folder
cd public
# Add changes to git.
git add -A

# Commit changes.
msg=&amp;amp;quot;rebuilding site `date`&amp;amp;quot;
if [ $# -eq 1 ]
  then msg=&amp;amp;quot;$1&amp;amp;quot;
fi
git commit -m &amp;amp;quot;$msg&amp;amp;quot;

# Push source and build repos.
git push origin master

# Come Back
cd ..
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あとは冒頭で示した通り、&lt;code&gt;deploy.sh&lt;/code&gt;を実行し、本体をプッシュすることでhugoのプロジェクトが更新されます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-terminal&#34;&gt;#hugoプロジェクトのルートディレクトリから・・・
$./deploy.sh
#deploy.shの実行
$git push origin master
#本体もプッシュする
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;いよいよ、Github Pagesにアクセスしてみましょう。先ほど作成したリポジトリの名前がそのままurlになっていますので、&lt;code&gt;gitのusername.github.io&lt;/code&gt;というurlでいけるはずです。&lt;/p&gt;

&lt;p&gt;無事、hugoのブログが表示されたでしょうか。&lt;/p&gt;

&lt;h2 id=&#34;感想:998e98563bf47ddb62011ba7e51f2b7e&#34;&gt;感想&lt;/h2&gt;

&lt;p&gt;本当ならddploy.shを実行するだけでいけるはず？また、画像の表示がうまくいかない、カテゴリーやタグ付けのやり方がわからないなど、まだやることはいっぱいですが、とりあえず楽にmdで書けるブログが手に入ったのは非常に良かったです。ちょいちょいカスタマイズしていきます。&lt;/p&gt;

&lt;h2 id=&#34;謝辞:998e98563bf47ddb62011ba7e51f2b7e&#34;&gt;謝辞&lt;/h2&gt;

&lt;p&gt;本ブログのテーマはrakuishi様の&lt;a href=&#34;https://github.com/rakuishi/hugo-zen&#34;&gt;hugo-zen&lt;/a&gt;をほんの少しカスタマイズして利用しています。どうもありがとうございます！！&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>